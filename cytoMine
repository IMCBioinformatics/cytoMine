#!/usr/bin/env Rscript
#suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(docopt))
suppressPackageStartupMessages(library(CATALYST))
suppressPackageStartupMessages(library(limma))
suppressPackageStartupMessages(library(flowCore))
suppressPackageStartupMessages(library(cytofkit))
suppressPackageStartupMessages(library(reshape2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(Rtsne.multicore))
suppressPackageStartupMessages(library(matrixStats))
suppressPackageStartupMessages(library(pheatmap))
suppressPackageStartupMessages(library(readr))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(ggrepel))
suppressPackageStartupMessages(library(ConsensusClusterPlus))
suppressPackageStartupMessages(library(FlowSOM))

source("/opt/applications/cytoMine/helper_functions.R")

"
Usage:
cytoMine (--inputDir=<files>  --outputDir=<results_dir> --mode=<mode>) [--transformMethod=<methodName> --barcodeScheme=<barcodeScheme> --beadMasses=<beads>  --FlowSom_k=<ClusterN> --downSample=<number> --perplexity=<p>  --theta=<theta> --max_iter=<max_iter> --num_threads=<num_threads> --sampleFile=<csvfile> --markerFile=<csvfile> --reclustFSFile=<csvfile> --reclustCXFile=<csvfile> --device=<plotType>]

Description: Runs Normalization and debarcoding for CYTOF data

Options:
--inputDir=<files>		Input FCS files direcotry
--outputDir=<dir>		Output directory for data and plots
--device=<type>			[default png] options png, pdf, svg
--mode=<mode>           	[defualt full] modes available: basic, concat, channels or full
--beadMasses=<beads>		Bead masses to be used for normalization (optional)
--barcodeScheme=<filename>	filename for the barcode scheme for debarcoding (optional)
--transformMethod=<transform>  [default logicl] options:autoLgcl,none,arcsinh,cytofAsinh
--FlowSom_k=<N of clusters> Number of clusters to calculate with FLOWSOM
--downSample=<number of cells>   [default 5000] or set your own numnber
--perplexity=<p>              [default 30 ] Perplexity parameter
--theta=<theta>               [default 0.5 ] Speed/accuracy trade-off (increase for less accuracy), set to 0.0 for exact TSNE (default: 0.5)
--max_iter=<max_iter>         [default 1000] Number of iterations
--num_threads=<num_threads>   [default 2] Number of cores to be used for parallel runs.
--sampleFile=<csvfile>        [default sample_info.csv in inputDir] else any filename in inputDir
--markerFile=<csvfile>        [default marker_list.csv in inputDir] else any filename in inputDir
--reclustFSFile=<csvfile>     [default merge_FlowSom.csv in inputDir] else any filename in inputDir. This file is used to merge clusters generated by FlowSom using user provided merge list
--reclustCXFile=<csvfile>     [default merge_clusterx.csv in inputDir] else any filename in inputDir.This file is used to merge clusters generated by ClusterX using user provided merge list
" -> doc

opts <- docopt(doc)

## Output Directory
outputDir<-as.character(opts$outputDir)

## Input Directory
inputDir<-as.character(opts$inputDir)

## device
device<-ifelse(is.null(opts$device),
                       "png",as.character(opts$device))
print(device)

## concat
concat<- ifelse(is.null(opts$concat), FALSE, TRUE)
## beadMasses
## Beads
if(!is.null(opts$beadMasses))
{
  beadMasses<-as.numeric(strsplit2(opts$beadMasses,","))
} else {beadMasses<-opts$beadMasses}

###
## Barcode Scheme
if(!is.null(opts$barcodeScheme))
{
  
  barcodeScheme<-read.table(paste0(inputDir,"/",as.character(opts$barcodeScheme)),
                            check.names=FALSE,row.names=1,header=TRUE,sep=",")
  #print(barcodeScheme)
} else  barcodeScheme<-opts$barcodeScheme



### Transformation
transformation<-ifelse(is.null(opts$transformMethod),
                       "logicle",as.character(opts$transformMethod))

mode<-ifelse(is.null(opts$mode),
                       "full",as.character(opts$mode))

if((mode != "channels") & (mode != "concat") & (mode != "basic")  &( mode!="full")&( mode!="mergeCluster")){
  message("CytoMine: Please chose a correct mode: channels, concat, basic, full or mergeCluster")
  quit()
}

## FLOWSOM K
nmc=ifelse(is.numeric0(as.numeric(opts$FlowSom_k)), 20 ,as.numeric(opts$FlowSom_k))

## tSNE parameters
downsample=ifelse(is.numeric0(as.numeric(opts$downSample)), 5000 ,as.numeric(opts$downSample))
perplexity=ifelse(is.null(opts$perplexity),30,as.numeric(opts$perplexity))
theta=ifelse(is.null(opts$theta),0.5,as.numeric(opts$theta))
max_iter=ifelse(is.null(opts$max_iter),1000,as.numeric(opts$max_iter))
num_threads=ifelse(is.null(opts$num_threads),10,as.numeric(opts$num_threads))


## InputFiles
#Sample file
if(!is.null(opts$sampleFile))
{
  sampleFile <- as.character(opts$sampleFile)
} else
  sampleFile<-"sample_info.csv"

# maker list file
if(!is.null(opts$markerFile))
{
  markerFile <- as.character(opts$markerFile)
} else
  markerFile<-"marker_list.csv"

#mergefileFS
if(!is.null(opts$reclustFSFile))
{
  reclustFSFile <- as.character(opts$reclustFSFile)
} else
  reclustFSFile<-opts$reclustFSFile

# merge Clusterx clusters
if(!is.null(opts$reclustCXFile))
{
  reclustCXFile <- as.character(opts$reclustCXFile)
} else
  reclustCXFile<-opts$reclustCXFile


## Colors for plots
#colp=colorRampPalette(brewer.pal(8, "Paired") )
colp=c("#DC050C", "#FB8072", "#1965B0", "#7BAFDE", "#882E72",
       "#B17BA6", "#FF7F00", "#FDB462", "#E7298A", "#E78AC3",
       "#33A02C", "#B2DF8A", "#55A1B1", "#8DD3C7", "#A6761D",
       "#E6AB02", "#7570B3", "#BEAED4", "#666666", "#999999",
       "#aa8282", "#d4b7b7", "#8600bf", "#ba5ce3", "#808000",
       "#aeae5c", "#1e90ff", "#00bfff", "#56ff0d", "#ffff00",
       "#db83b8", "#6e7708", "#1ab2a5" ,"#a159ff" ,"#6850af" ,"#b2391a", "#c9fcff", "#b88de0",
       "#ed7bd0", "#c69d43", "#43d63e", "#4a42b5", "#5874ef", "#d4db0f", "#ef7a82" ,"#90f4b8",
       "#e2d544", "#dae577", "#ef1ae5" ,"#577acc" ,"#c8e522" ,"#46fc5b", "#8ed356", "#35cc88",
       "#7cf498", "#e56478", "#5a9bbc", "#4d58b5", "#f97290" ,"#fcbba1" ,"#d3103b", "#57e5c1",
       "#a18cff", "#0ee6ea", "#e863cd" ,"#dbcf4c", "#f75d2a" ,"#551ea8" ,"#393ba8" ,"#ddd711",
       "#ce0aa4", "#e251a1", "#9d5cf2", "#67ce50" ,"#020868", "#b3ea6b", "#82e5ba", "#0bb79d",
       "#20ea89", "#8ae559" ,"#db5939" ,"#ffc9ed", "#d6ccff" ,"#8befbd" ,"#627ef7", "#508fba",
       "#fcc397", "#ed4bb7" ,"#fc7e93" ,"#cbf9a4", "#e0c57b", "#04667c", "#c60d4b" ,"#0d679b",
       "#89a1d3", "#8378d3", "#fff1bf" ,"#51ffc2", "#caf7a3" ,"#ffc9a3", "#4ac637" ,"#e778ed",
       "#e244e5" ,"#39efa6" ,"#7cc643", "#2c2fe8" ,"#e8ab8d", "#3bf9da", "#6cddb2", "#ffab93",
       "#871b08", "#6e6bea" ,"#852ab2", "#ddb475", "#702e96", "#ff19e8" ,"#90f9d5" ,"#1c4c7a",
       "#2797ba", "#5fd3bc", "#fc7bda", "#e0210f" ,"#f486e4" ,"#666ac9", "#98f2ce", "#06517a",
       "#f2a17b", "#421ced", "#e8d422", "#07ff14")
# width for ggplot
w<- 9

# device option

#device="pdf"


#Create necessary directories
dir.create(outputDir,showWarnings = F)
debarcodeDir=paste0(outputDir,"/debarcoded_files")
mahalplotDir=paste0(outputDir,"/","Mahal_plots")
eventplotDir=paste0(outputDir,"/","event_plots")
dir.create(mahalplotDir,showWarnings = F)
dir.create(debarcodeDir,showWarnings = F)
dir.create(eventplotDir,showWarnings = F)

tsneDir=paste0(outputDir,"/tsne")
flowsomDir=paste0(outputDir,"/FlowSOM")
clusterxDir=paste0(outputDir,"/ClusterX")
basicplotDir=paste0(outputDir,"/basicPlots")
newclustDir=paste0(outputDir,"/NewClustering")
dir.create(tsneDir,showWarnings = F)
dir.create(flowsomDir,showWarnings = F)
dir.create(clusterxDir,showWarnings = F)
dir.create(basicplotDir,showWarnings = F)
dir.create(newclustDir,showWarnings = F)




####################################### CODE ###############################

## Check if merging of clusters  is needed
if (mode == "mergeCluster")
{
  #check if cluster files are available.
  if(is.null(reclustFSFile) & is.null(reclustCXFile))
  {
    message("CytoMine: To merge clusters, please provide a recluster file for FlowSOM or ClusterX. Use options --reclustFSFile or --reclustCXFile")
    quit(status = 0)
  } else if(!is.null(reclustFSFile))
  {
  
    cluster_merging<-read.csv(paste0(inputDir,"/",reclustFSFile))
    local({
      load("CytoMine.RData")
    cluster_merging$new_cluster <- factor(cluster_merging$new_cluster)
    
    ## New clustering
    mm <- match(cell_clust_FS, cluster_merging$original_cluster)
    cell_mclust_FS<- cluster_merging$new_cluster[mm]
    
    mm <- match(code_clust_FS, cluster_merging$original_cluster)
    code_mclust_FS <- cluster_merging$new_cluster[mm]
    
    # New t-sne
    dr <- data.frame(tSNE1 = tsne_out$Y[, 1], tSNE2 = tsne_out$Y[, 2],
                     expr[tsne_inds,])
    dr$sample_id <- sample_ids[tsne_inds]
    mm <- match(dr$sample_id, sample_id)
    dr$condition <- md$Group[mm]
    dr$cell_mclust_FS<- factor(cell_mclust_FS[tsne_inds])
    
ggp <- ggplot(dr,  aes(x = tSNE1, y = tSNE2, color = cell_mclust_FS)) +
  geom_point(size = 0.2) +
  theme_bw() +
  scale_color_manual(values = colp) +
  guides(color = guide_legend(override.aes = list(size = 4), ncol = 2))
message("CytoMine: Generating t-SNE plot for FLOWSOM clustering.")
## Facet per sample
ggsave(
  filename = paste0(flowsomDir,"/merge_clustering_FlowSOM.",device),
  ggp + facet_wrap(~ sample_id),width=10,height = 10)




#    ggsave(
 #     filename = paste0(newclustDir,"/merge_clustering_FLOWSOM.", device),
#      ggplot(dr,  aes(x = tSNE1, y = tSNE2, color = cell_mclust_FS)) +
#        geom_point(size = 0.2) +
#        theme_bw() +
#        scale_color_manual(values = colp) +
#        guides(color = guide_legend(override.aes = list(size = 4))),width=10,height = 10)
    
    
    plot_clustering_heatmap_wrapper(expr = expr,
                                    expr01 = expr01, cell_clustering = cell_mclust_FS,
                                    color_clusters = colp,filename=paste0(newclustDir,"/merged_heatmap_both_FLOWSOM.",device))
    
    plot_clustering_heatmap_wrapper(expr = expr,
                                    expr01 = expr01, cell_clustering = cell_clust_FS,
                                    color_clusters = colp, cluster_merging = cluster_merging,
                                    filename=paste0(newclustDir,"/merged_heatmap_FLOWSOM.",device))
    
    ######################################################### BOXPLOTS for expression #################################################
    counts_table <- table(cell_mclust_FS, sample_ids)
    props_table <- t(t(counts_table) / colSums(counts_table)) * 100
    counts <- as.data.frame.matrix(counts_table)
    props <- as.data.frame.matrix(props_table)
    
    ggdf <- melt(data.frame(cluster = rownames(props), props),
                 id.vars = "cluster", value.name = "proportion", variable.name = "sample_id")
    ggdf$cluster <- factor(ggdf$cluster)
    ## Add condition info
    mm <- match(ggdf$sample_id, sample_id)
    ggdf$condition <- factor(md$Group[mm])
	write.csv(ggdf,paste0(newclustDir,"/boxplot_FLOWSOM_data.csv"))
    ggsave(filename = paste0(newclustDir,"/boxplot_FLOWSOM.",device),
           ggplot(ggdf) +
             geom_boxplot(aes(x = condition, y = proportion, color = condition,
                              fill = condition), position = position_dodge(), alpha = 0.5,
                          outlier.color = NA) +
             geom_point(aes(x = condition, y = proportion, color = condition), alpha = 0.8, position = position_jitterdodge())+ 
             facet_wrap(~cluster, scales = "free", nrow = 2) +
             theme_bw() +
             theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
                   axis.title.x = element_blank(), strip.text = element_text(size = 6)) +
             scale_color_manual(values = colp) +
             scale_fill_manual(values = colp),height = 10,width = 10) 
    })
    
    } else if(!is.null(reclustCXFile))
  {


    cluster_merging<-read.csv(paste0(inputDir,"/",reclustCXFile))
    local({
      load("cytoMine.RData")
    n=max(Clusterx)
    cluster_merging<-cluster_merging[1:n,]
    
    cluster_merging$new_cluster <- factor(cluster_merging$new_cluster)
    
    ## New clustering
    
    mm <- match(Clusterx, cluster_merging$original_cluster)
    cell_mclust_CX <- cluster_merging$new_cluster[mm]
    
    expr_tsne<-expr[tsne_inds,]
    expr01_tsne<-expr01[tsne_inds,]
    
    # New t-sne
    dr$cell_mclust_CX <- cell_mclust_CX
    ggplot(dr,  aes(x = tSNE1, y = tSNE2, color = cell_mclust_CX)) +
      geom_point(size = 0.2) +
      theme_bw() +
      scale_color_manual(values = colp) +
      guides(color = guide_legend(override.aes = list(size = 4)))
    
    ## New heatmap
    plot_clustering_heatmap_wrapper(expr = expr_tsne,
                                    expr01 = expr01_tsne, cell_clustering = cell_mclust_CX,
                                    color_clusters = colp,filename=paste0(newclustDir,"/merged_heatmap_both_ClusterX.",device))
    # 
    plot_clustering_heatmap_wrapper(expr = expr_tsne,
                                    expr01 = expr01_tsne, cell_clustering = cell_clust_CX,
                                    color_clusters = colp, cluster_merging = cluster_merging,
                                    filename=paste0(newclustDir,"/merged_heatmap_ClusterX.",device))
  
    
    })
  }
  quit(status = 0)
}


# Read input files
md<-read.csv(paste0(inputDir,"/",sampleFile),stringsAsFactors = F,header = T)
files<-md[,1]

#assumes first column is marker list
ml<-read.csv(paste0(inputDir,"/",markerFile),stringsAsFactors = F,header = T)

#assumes first column is marker list
marker_id<-ml[,1]
## READ in file or files
if (!is.null(files))
  fcs <- readFCS(paste0(inputDir, "/", files))


## check if mode is channels, write a channels
##file and then stop execution of the code

if (mode == "channels")
{
  if (class(fcs) == "flowFrame")
  {
    write_csv(
      x = pData(fcs@parameters)[, c("name", "desc")],
      path = paste0(outputDir, "/", "Channels.csv")
    )
  } else if ((mode == "channels") & (class(fcs) == "flowSet"))
  {
    ## remeber flowframes are in an environment so this is the way to access it without using $ notation
    write_csv(
      x = pData(fcs@frames[[ls(fcs@frames)[1]]]@parameters)[, c("name", "desc")],
      path = paste0(outputDir, "/", "Channels.csv")
    )
  }
  message("CytoMine: Finished writing channels to Channels.csv.")
  quit(status = 0)
}


## check if marker names match channel descriptions
message("CytoMine: Checking marker list.")

if (class(fcs) == "flowFrame")
  {
      x = pData(fcs@parameters)[, c("name", "desc")]
	if(!all(marker_id %in% x$desc))
	{ 
	message("CytoMine: ** Error** Marker list does not match fcs file description. \n Please take a look at the 'desc' column in  Channels.csv file in ", outputDir, " directory.")
    	write_csv(x=x,
      	path = paste0(outputDir, "/", "Channels.csv")
    	)
	quit(status=0)
	}  
} else if (class(fcs) == "flowSet")
  {
    ## remeber flowframes are in an environment so this is the way to access it without using $ notation
      x = pData(fcs@frames[[ls(fcs@frames)[1]]]@parameters)[, c("name", "desc")]
	if(!all(marker_id %in% x$desc))
	{ 
	  message("CytoMine: ** Error** Marker list does not match fcs file description.\n Please take a look at the 'desc' column in  Channels.csv file in ", outputDir ," directory.")
	     
    write_csv(
	x=x,
      path = paste0(outputDir, "/", "Channels.csv")
    	     )
	quit(status=0)
	}
  }




### Fix for when fcs description is NA and multiple fcs files are read in

if (class(fcs) == "flowSet")
{
  x = fcs[[1]]
  repl = paste0("Dummy", as.character(sample(
    1:15, size = sum(is.na(x@parameters@data$desc)), replace = F
  )))
  fcs <- fsApply(fcs, function(x) {
    x@parameters@data$desc[is.na(x@parameters@data$desc)] <- repl
    
    colnames(x) <- x@parameters@data$desc
    colnames(x@exprs) <- x@parameters@data$desc
    return(x)
  })
  
} else if (class(fcs) == "flowFrame")
{
  colnames(fcs@exprs) <- fcs@parameters@data$desc
}



 #Normalize
 if(!is.null(beadMasses) & !is.null(files))
 {
   fcs<-normalize(fcs=fcs,beads=beadMasses,outpath=outputDir)
 }

## Debarcode

if((!is.null(barcodeScheme)))
{
  if(class(fcs) != "flowFrame") 
  {
    message("CytoMine: Please provide single fcs file for debarcoding!")
    quit(status=0)
  }
  
  re<-debarcode(fcs=fcs,bscheme=barcodeScheme,out_path = debarcodeDir)
  plotYields(x=re, which=0, out_path=outputDir)
  plotEvents(x=re, which='all', n_events=1000,out_path=eventplotDir)
  fcs<-readFCS(list.files(pattern = ".fcs",path = debarcodeDir,full.names = T))
  
  ## make plotMahal for each barcode
  #print("Generating plot_Mahal for each barcode....")
  lapply(rownames(barcodeScheme),function(x){
    plotMahal(x=re,which=x,
              out_path=mahalplotDir,name_ext=x)
    message(paste0("CytoMine: Generating Mahal plots for " ,x))
  }
  )
}


## randomize values between zeros and -1
fcs_rand<-randomize_zeros(fcs)
message("CytoMine: Randomizing 0 values.")


## Transform fcs
if(class(fcs)=="flowSet")
{ message(paste0("CytoMine: Transforming fcs files with ",transformation," transformation."))
fcs<-fsApply(fcs_rand,function(x){
   expr<-transform(x,transformMethod = transformation)
   exprs(x) <- expr
   x
 })
} else if (class(fcs_rand)=="flowFrame"){
  message(paste0("CytoMine: Transforming fcs file with ",transformation," transformation."))
  expr<-transform(fcs_rand,transformMethod = transformation)
  exprs(fcs_rand) <- expr
  fcs<-fcs_rand
  }

## Extract expression
expr <- fsApply(fcs, exprs)
message("CytoMine: Extracting expression matrix.")
 
## Only select data with the provided marker list
expr<-expr[, marker_id]
message("CytoMine: Extracting expression matrix with markers of interest.")

# Scale data to values between 0 and 1 for heatmaps
rng <- colQuantiles(expr, probs = c(0.01, 0.99))
expr01 <- t((t(expr) - rng[, 1]) / (rng[, 2] - rng[, 1]))
expr01[expr01 < 0] <- 0
expr01[expr01 > 1] <- 1



### Create unique sample ids and create an array with sample_ids
## as long as the number of events in the file 
sample_id<-paste0(md$Group,"_",md$Number)
if(class(fcs)=="flowSet")
{sample_ids <- rep(sample_id, fsApply(fcs, nrow))
}else if (class(fcs)=="flowFrame")
  {sample_ids <- rep(sample_id,nrow(fcs))}
   
 print(device)
#make basic plots
message("CytoMine: Generating basic plots like counts per sample and density plots for markers")
basicPlots(expr,sample_ids,md,basicplotDir,colp,device)


### PCA plot
expr_med <- data.frame(sample_id = sample_ids, expr) %>%
  group_by(sample_id) %>%
  summarize_all(funs(median))

expr_medT <- t(expr_med[, -1])
colnames(expr_medT) <- expr_med$sample_id

#head(expr_medT)

pca <- prcomp(t(expr_medT),center = T)
message("CytoMine: Generating PCA plot.")
ggpca <- data.frame(PCA1 = pca$x[,1], PCA2 = pca$x[,2],
                   sample_id = colnames(expr_medT))
mm <- match(ggpca$sample_id, sample_id)
ggpca$condition <- md$Group[mm]
ggsave(
  filename = paste0(basicplotDir,"/PCA_plots.",device),ggplot(ggpca, aes(x = PCA1, y = PCA2, color = condition)) +
  geom_point(size = 2, alpha = 0.8) +
  geom_label_repel(aes(label = sample_id),size=2) +
  theme_bw() +
  scale_color_manual(values = colp),width = w,height = 5)


#### MDS
# Get the median marker expression per sample

mds <- plotMDS(expr_medT, plot = FALSE)

library(ggrepel)
ggdf <- data.frame(MDS1 = mds$x, MDS2 = mds$y,
                   sample_id = colnames(expr_medT))
mm <- match(ggdf$sample_id, sample_id)
ggdf$condition <- md$Group[mm]

ggsave(
  filename = paste0(basicplotDir,"/MDS_plots.",device),ggplot(ggdf, aes(x = MDS1, y = MDS2, color = condition)) +
  geom_point(size = 2, alpha = 0.8) +
  geom_label_repel(aes(label = sample_id),size=2) +
  theme_bw() +
  scale_color_manual(values = colp),width = w,height = 5)




if(mode=="basic")
{
  message("CytoMine: Done generating basic plots for mode basic. Please check the outputDir for results ")
  quit(status=0)
}

#### t-SNE for each one of the sample files.

## Find and skip duplicates
dups <- which(!duplicated(expr))

## Data subsampling: create indices by sample
inds <- split(1:length(sample_ids), sample_ids)

## How many cells to downsample per-sample
tsne_ncells <- pmin(table(sample_ids), downsample)

## Get subsampled indices
tsne_inds <- lapply(names(inds), function(i){
  s <- sample(inds[[i]], tsne_ncells[i], replace = FALSE)
  intersect(s, dups)
})

tsne_inds <- unlist(tsne_inds)

tsne_expr <- expr[tsne_inds,]
message(paste0("CytoMine: Running t-SNE with ",downsample, " cells per sample, preplexity=", perplexity,", theta=", theta," and max_iter=", max_iter))
set.seed(1234)
tsne_out <- Rtsne.multicore(tsne_expr, check_duplicates = FALSE, pca = FALSE,verbose=FALSE,perplexity = perplexity,theta = theta,max_iter = max_iter,num_threads=20)

## Plot t-SNE colored by expression
dr <- data.frame(tSNE1 = tsne_out$Y[, 1], tSNE2 = tsne_out$Y[, 2],
                 expr[tsne_inds,])
dr$sample_id <- sample_ids[tsne_inds]
mm <- match(dr$sample_id, sample_id)
dr$condition <- md$Group[mm]
message("CytoMine: Plotting t-sne colored by marker expressions.")
for (i in 3:(2+ncol(expr)))
  ggsave(
    filename = paste0(tsneDir,"/",colnames(dr)[i],"_tsne.",device),
    ggplot(dr,  aes(x = tSNE1, y = tSNE2,color=dr[,i])) +
  geom_point(size = 0.2) +
  theme_bw() +
  scale_color_gradientn(colnames(dr)[i],
                        colours = colorRampPalette(rev(brewer.pal(n =11, name = "Spectral")))(50)) +
  facet_wrap(~ sample_id),width=10,height=10)

### t-sne plots without zero expression data
message("CytoMine: Plotting t-SNE colored by marker expressions without 0 expression.")
dr[, 3:(2+ncol(expr))][dr[, 3:(2+ncol(expr))] < 0] <- NA

for (i in 3:(2+ncol(expr)))
  ggsave(
    filename = paste0(tsneDir,"/",colnames(dr)[i],"_tsne_without_zerosexp.",device),
    ggplot(dr,  aes(x = tSNE1, y = tSNE2,color=dr[,i])) +
      geom_point(size = 0.2) +
      theme_bw() +
      scale_color_gradientn(colnames(dr)[i],na.value = "white",
                            colours = colorRampPalette(rev(brewer.pal(n =11, name = "Spectral")))(50)) +
      facet_wrap(~ sample_id),width=10,height=10)



# ###############################################################
# 
# ################# Clustering FLOWSOM with tsne ################################
# ################### FLOWSOM clustering #####################


fsom <- ReadInput(fcs, transform = FALSE, scale = FALSE)
set.seed(1234)
message("CytoMine: Building SOM for FLOWSOM clustering....")
som <- BuildSOM(fsom,colsToUse = marker_id,silent = TRUE)
## Get the cell clustering into 100 SOM codes
cell_clustering_som <- som$map$mapping[,1]

### meta clustering
## Metaclustering into 20 clusters with ConsensusClusterPlus
message("CytofMine: Mapping data to SOM ....")
codes <- som$map$codes
plot_outdir <- "consensus_plots"
mc <- ConsensusClusterPlus(t(codes), maxK = nmc, reps = 100,
                           pItem = 0.9, pFeature = 1, title = plot_outdir, plot = device,
                           clusterAlg = "hc", innerLinkage = "average", finalLinkage = "average",
                           distance = "euclidean", seed = 1234,verbose = F)

## Get cluster ids for each cell
code_clust_FS <- mc[[nmc]]$consensusClass
cell_clust_FS <- code_clust_FS[cell_clustering_som]


# # #################### Clustering heatmap for FLOWSOM ####################

message("CytoMine: Generating Heatmap for FLOWSOM clustering.")
plot_clustering_heatmap_wrapper(expr = expr,
                                expr01 = expr01,
                                cell_clustering = cell_clust_FS, color_clusters = colp,
                                filename =paste0(flowsomDir,"/heatmap_FLOWSOM.",device))

### t-SNE with clustering
dr <- data.frame(tSNE1 = tsne_out$Y[, 1], tSNE2 = tsne_out$Y[, 2],
                 expr[tsne_inds,])
dr$sample_id <- sample_ids[tsne_inds]
mm <- match(dr$sample_id, sample_id)
dr$condition <- md$Group[mm]

dr$cell_clust_FS <- factor(cell_clust_FS[tsne_inds], levels = 1:nmc)

## Plot t-SNE colored by clusters
ggp <- ggplot(dr,  aes(x = tSNE1, y = tSNE2, color = cell_clust_FS)) +
  geom_point(size = 0.2) +
  theme_bw() +
  scale_color_manual(values = colp) +
  guides(color = guide_legend(override.aes = list(size = 4), ncol = 2))
message("CytoMine: Generating t-SNE plot for FLOWSOM clustering.")
## Facet per sample
ggsave(
  filename = paste0(flowsomDir,"/clustering_FlowSOM.",device),
  ggp + facet_wrap(~ sample_id),width=10,height = 10)





# 
# #################### Clustering with CLUSTERX with tsne######################

message("CytofMine: Clustering data with ClusterX.")
Clusterx <-cytof_cluster(ydata = tsne_out$Y,xdata = expr,method = "ClusterX")
cell_clust_CX<-factor(Clusterx)
dr$cell_clust_CX<-cell_clust_CX

## Plot t-SNE colored by clusters
ggp <- ggplot(dr,  aes(x = tSNE1, y = tSNE2, color = cell_clust_CX)) +
  geom_point(size = 0.2) +
  theme_bw() +
  scale_color_manual(values = colp) +
  guides(color = guide_legend(override.aes = list(size = 4), ncol = 2))

## Facet per sample
ggsave(
  filename = paste0(clusterxDir,"/clustering_ClusterX.",device),
  ggp + facet_wrap(~ sample_id),width=10,height = 10)

### Heatmap for clusterX
expr_tsne<-expr[tsne_inds,]
expr01_tsne<-expr01[tsne_inds,]

plot_clustering_heatmap_wrapper(expr = expr_tsne,
                                expr01 = expr01_tsne,
                                cell_clustering = cell_clust_CX, color_clusters = colp,
                                filename =paste0(clusterxDir,"/heatmap_ClusterX.",device))




message("CytoMine:Saving workspace. This may take a while.")
save.image(file = "CytoMine.RData")
#save(cell_clust_FS,code_clust_FS,tsne_out,tsne_inds,sample_ids,md,ml,colp,expr,expr01,sample_id,ClusterX,cell_clust_CX,file = "cytoMine.RData")
quit(status=0)
###############################################
#Prepare data for edgeR
# data.frame(cluster=cell_clust_FS,sample_ids=sample_ids)-> ct
# ct %>% group_by(sample_ids,cluster) %>% count()->ct2
# ass<-spread(ct2,sample_ids,n)
# library(edgeR)
# y <- DGEList(ass)
# totals<-colSums(ass)[-1]
# y <- DGEList(ass,lib.size = totals)
# y <- DGEList(ass[,-1],lib.size = totals)
# keep <- aveLogCPM(y) >= aveLogCPM(5, mean(totals))
# ass <- ass[keep,]
# design <- model.matrix(~factor(md$Group))
# y <- estimateDisp(y, design)
# fit <- glmQLFit(y, design, robust=TRUE)
# res <- glmQLFTest(fit, coef=2)








